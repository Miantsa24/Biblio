

fonctionnalités // >>> connexion adherant: 
                                        - login : email et motDePasse
                                        -correspondance à l'email et le mot de passe donné lors de l'ajout d'un adherant (table adherant)
                                        -lui seul peut accéder à son compte

        >>> menu latéral comme dans cote bibliothécaire:
               // >>> accueil:
                            -Message de Bienvenue
                >>> liste livre :
                                  //-liste exemplaire / livre + statut / par exemplaire
                                  /- bouton reserver sur chaque exemplaires avec statut "emprunte" ou "reserve" >> formulaire reservation (demande de reservation en voyé à l'admin pour être approuver ou refuser)(reservation mise en attente)

                >>> pret en cours / adherant :
                                                -liste des prets en cours pour l'adherant connecter
                                                -bouton prolonger sur chaque pret en cours (demande de prolongement en voyé à l'admin pour être approuver ou refuser)
               // >>> formulaire reservation :
                                                -ref de l'adherant
                                                -ref de l'exemplaire (si il a cliqué sur un bouton reserver depuis la liste des livres, le ref de l'exemplaire est automatiquement / dynamiquement écrit sur le champ de ref de l'exemplaire)
                                                -date de reservation (date de prevision de pret du livre, ex: il veut preter le livre le 13/07/2025)
                                                -bouton reserver (envoie la demande d'approbation vers l'admin)
                                                (alternatif >>> côté admin: lorsque la demande est envoyé vers l'admin quand il approuve il doit comparer la date de reservation inséré dans l'input par l'adherant à la date de retour prevue de l'exemplaire qu'il veut reserver, si date de reservation < date de retour prevue (date de reservation est avant la date de retour prevue) la reservation est automatiquement annulé (refusé))
                                                il renvoie ensuite une erreur vers le coté adherant (dans le menu de reservation) disant que sa reservation a été annulé en raison de l'indisponibilité de l'exemplaire pour la date de reservation que l'adherant a inséré + le livre sera disponible le "date de retour prevue"
                                                si il y a encore des exemplaires disponibles pour l'exemplaire que l'user a choisi de reserver, renvoie une erreur, il y a encore un exemplaire disponible (deja fait dans côté admin)
                //>>> liste reservation :
                                        -reservation en attente
                                        -reservation annulé
                                        -reservation approuvé (reservation approuvé par l'admin mais pas encore terminé (exemplaire encore preter))
                                        -reservation qui peut être preter
               // >>> deconnexion

   ( Optionel ) >>> my profil sur le header: 
                                    -pour voir les informations du compte

alertes >>> reservation peut être preter maintenant
        >>> doit rendre un livre
        >>> ne peut être reserver car date reservation < date retour prevue (exemplaire dispo le "date retour prevue")
        >>> l'exemplaire n'est pas encore rendu, rendu en retard (date retour reel)

//cahier des charges:
Nom: Connexion_adhérant
Objectifs: Permettre à un adhérant de se connecter au système pour accéder à ses fonctionnalités (réservation, prolongement).
Acteur: Adhérant
Entrée:
email
Mot de passe


Scénario nominal:
L'adhérant accède à l'interface de connexion.
Il entre son login(email) et son mot de passe.
Il clique sur le bouton "Se connecter".


Règles de gestion:
Le login et le mot de passe doivent correspondre à un adhérant existant.
L'abonnement de l'adhérant doit être valide (date actuelle entre date de début et date de fin).
L'adhérant ne doit pas avoir de sanction active.


Scénario alternatif:
Si une règle de gestion n'est pas respectée, afficher une erreur (ex. : "Identifiants incorrects" ou "Compte sanctionné").


Résultat:
L'adhérant est connecté et peut accéder aux fonctionnalités autorisées (réservation, prolongement).


J'ai directement mis le css dans livres.jsp et ca a marché, le mettre dans styles.css ne marchait pas et donc je laisse comme ça 
livres.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Liste des livres" scope="request"/>
<jsp:include page="/WEB-INF/views/adherant-layout.jsp"/>
<style>
main .section {
  margin-bottom: 40px;
}

main .section h3 {
  font-family: 'Roboto', 'Poppins', sans-serif;
  font-size: 22px;
  font-weight: 600;
  color: #4A6FA5;
  margin-bottom: 15px;
  text-transform: capitalize;
  position: relative;
  display: inline-block;
  padding: 6px 10px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
}

main .section h3:hover {
  color: var(--primary-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

main h2.page-title {
  font-family: 'Roboto', 'Poppins', sans-serif;
  font-size: 26px;
  font-weight: 700;
  color: #4A6FA5;
  margin-bottom: 20px;
  margin-top: 5px; /* Espacement minimal au-dessus */
}

.card.exemplaire-card {
  background: linear-gradient(145deg, #ffffff, #f6f9ff);
  border: none;
  border-radius: 12px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  overflow: hidden;
}

.card.exemplaire-card:hover {
  transform: translateY(-8px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.card.exemplaire-card .card-body {
  padding: 20px;
}

.card.exemplaire-card .card-title {
  color: #4A6FA5;
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 15px;
  text-transform: uppercase;
}

.card.exemplaire-card .card-text {
  font-size: 14px;
  color: #333;
  line-height: 1.8;
}

.card.exemplaire-card .card-text strong {
  color: #4A6FA5;
}

.card.exemplaire-card .badge {
  font-size: 0.9em;
  padding: 8px 12px;
  border-radius: 12px;
  font-weight: 500;
  transition: transform 0.2s ease;
}

.card.exemplaire-card .badge:hover {
  transform: scale(1.1);
}

.badge.bg-success {
  background-color: #28a745;
  color: #fff;
}

.badge.bg-warning {
  background-color: #ffc107;
  color: #333;
}

.badge.bg-info {
  background-color: #17a2b8;
  color: #fff;
}

.card.exemplaire-card .btn-primary {
  background-color: #4A6FA5;
  border-color: #4A6FA5;
  font-size: 14px;
  padding: 8px 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 5px;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.card.exemplaire-card .btn-primary:hover {
  background-color: #3745c8;
  border-color: #3745c8;
  transform: scale(1.05);
}

.card.exemplaire-card .btn-primary i {
  font-size: 16px;
}
</style>
<main class="container mt-3">
    <h2 class="page-title">Liste des livres</h2>
    <c:if test="${not empty errorMessage}">
        <div class="alert alert-danger">${errorMessage}</div>
    </c:if>
    <c:forEach var="livre" items="${livres}">
        <section class="section mb-5">
            <h3 class="mb-3">Exemplaires pour : <c:out value="${livre.titre}"/></h3>
            <div class="row row-cols-1 row-cols-md-3 g-4">
                <c:forEach var="exemplaire" items="${livre.exemplaires}">
                    <div class="col">
                        <div class="card exemplaire-card h-100">
                            <div class="card-body">
                                <h5 class="card-title"><c:out value="${livre.titre}"/></h5>
                                <p class="card-text">
                                    <strong>Auteur :</strong> <c:out value="${livre.auteur}"/><br>
                                    <strong>ISBN :</strong> <c:out value="${livre.isbn}"/><br>
                                    <strong>Âge minimum :</strong> <c:out value="${livre.ageMinimum}"/><br>
                                    <strong>Exemplaire ID :</strong> <c:out value="${exemplaire.id}"/><br>
                                    <strong>Statut :</strong> 
                                    <c:choose>
                                        <c:when test="${exemplaire.statut == 'DISPONIBLE'}">
                                            <span class="badge bg-success">Disponible</span>
                                        </c:when>
                                        <c:when test="${exemplaire.statut == 'EMPRUNTE'}">
                                            <span class="badge bg-warning">Emprunté</span>
                                        </c:when>
                                        <c:when test="${exemplaire.statut == 'RESERVE'}">
                                            <span class="badge bg-info">Réservé</span>
                                        </c:when>
                                    </c:choose>
                                </p>
                                <c:if test="${exemplaire.statut == 'EMPRUNTE' || exemplaire.statut == 'RESERVE'}">
                                    <a href="#" class="btn btn-primary btn-sm"><i class="bi bi-bookmark-plus"></i> Réserver</a>
                                </c:if>
                            </div>
                        </div>
                    </div>
                </c:forEach>
            </div>
        </section>
    </c:forEach>
</main>
Maintenant j'aimerais faire en sorte que "Reservations" soit fonctionnel:
 >>> formulaire reservation :
                                                -ref de l'adherant
                                                -ref de l'exemplaire (si il a cliqué sur un bouton reserver depuis la liste des livres, le ref de l'exemplaire est automatiquement / dynamiquement écrit sur le champ de ref de l'exemplaire)
                                                -date de reservation (date de prevision de pret du livre, ex: il veut preter le livre le 13/07/2025)
                                                -bouton reserver (envoie la demande d'approbation vers l'admin)
                                                (alternatif >>> côté admin: lorsque la demande est envoyé vers l'admin quand il approuve il doit comparer la date de reservation inséré dans l'input par l'adherant à la date de retour prevue de l'exemplaire qu'il veut reserver, si date de reservation < date de retour prevue (date de reservation est avant la date de retour prevue) la reservation est automatiquement annulé (refusé))
                                                il renvoie ensuite une erreur vers le coté adherant (dans le menu de reservation) disant que sa reservation a été annulé en raison de l'indisponibilité de l'exemplaire pour la date de reservation que l'adherant a inséré + le livre sera disponible le "date de retour prevue"
                                                si il y a encore des exemplaires disponibles pour l'exemplaire que l'user a choisi de reserver, renvoie une erreur, il y a encore un exemplaire disponible (deja fait dans côté admin)

Reservation.java:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
public class Reservation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_reservation")
    private Integer idReservation;

    @Column(name = "id_exemplaire")
    private Integer idExemplaire;

    @Column(name = "id_adherant")
    private Integer idAdherant;

    @Column(name = "date_reservation")
    private LocalDate dateReservation;

    @Column(name = "date_demande")
    private LocalDateTime dateDemande;

    @Enumerated(EnumType.STRING)
    private StatutReservation statut;

    public enum StatutReservation {
        EN_ATTENTE, HONOREE, ANNULEE, TERMINEE
    }

    // Getters and setters
    public Integer getId() {
        return idReservation;
    }

    public void setId(Integer idReservation) {
        this.idReservation = idReservation;
    }

    public Integer getIdExemplaire() {
        return idExemplaire;
    }

    public void setIdExemplaire(Integer idExemplaire) {
        this.idExemplaire = idExemplaire;
    }

    public Integer getIdAdherant() {
        return idAdherant;
    }

    public void setIdAdherant(Integer idAdherant) {
        this.idAdherant = idAdherant;
    }

    public LocalDate getDateReservation() {
        return dateReservation;
    }

    public void setDateReservation(LocalDate dateReservation) {
        this.dateReservation = dateReservation;
    }

    public LocalDateTime getDateDemande() {
        return dateDemande;
    }

    public void setDateDemande(LocalDateTime dateDemande) {
        this.dateDemande = dateDemande;
    }

    public StatutReservation getStatut() {
        return statut;
    }

    public void setStatut(StatutReservation statut) {
        this.statut = statut;
    }
}
ReservationService:
package com.example.biblio.service;

import com.example.biblio.model.Adherant;
import com.example.biblio.model.Exemplaire;
import com.example.biblio.model.Livre;
import com.example.biblio.model.Reservation;
import com.example.biblio.repository.AdherantRepository;
import com.example.biblio.repository.AbonnementRepository;
import com.example.biblio.repository.ExemplaireRepository;
import com.example.biblio.repository.LivreRepository;
import com.example.biblio.repository.ReservationRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
public class ReservationService {

    private static final Logger logger = LoggerFactory.getLogger(ReservationService.class);

    @Autowired
    private AdherantRepository adherantRepository;

    @Autowired
    private AbonnementRepository abonnementRepository;

    @Autowired
    private ExemplaireRepository exemplaireRepository;

    @Autowired
    private LivreRepository livreRepository;

    @Autowired
    private ReservationRepository reservationRepository;

    @Transactional
    public void reserverLivre(Integer idAdherant, Integer idLivre, LocalDate dateReservation) {
        Adherant adherant = adherantRepository.findById(idAdherant)
                .orElseThrow(() -> new IllegalArgumentException("Adhérant non trouvé"));

        if (!adherant.hasValidAbonnement(dateReservation)) {
            throw new IllegalStateException("Abonnement non valide");
        }

        if (abonnementRepository.hasActivePenalite(idAdherant, dateReservation)) {
            throw new IllegalStateException("Adhérant sanctionné");
        }

        Livre livre = livreRepository.findById(idLivre)
                .orElseThrow(() -> new IllegalArgumentException("Livre non trouvé"));

        int ageAdherant = (int) ChronoUnit.YEARS.between(adherant.getDateNaissance(), dateReservation);
        if (livre.getAgeMinimum() > ageAdherant) {
            throw new IllegalStateException("Livre non adapté à l'âge de l'adhérant");
        }

        if (adherant.getQuotaRestantReservation() <= 0) {
            throw new IllegalStateException("Quota de réservations dépassé");
        }

        // Vérifier si un exemplaire est disponible pour ce livre
        List<Exemplaire> exemplaires = exemplaireRepository.findByLivreId(idLivre);
        boolean hasAvailableExemplaire = exemplaires.stream()
                .anyMatch(e -> e.getStatut() == Exemplaire.StatutExemplaire.DISPONIBLE);
        if (hasAvailableExemplaire) {
            logger.info("Réservation refusée pour adhérant id={} et livre id={} : un exemplaire est disponible.", idAdherant, idLivre);
            throw new IllegalStateException("Un exemplaire de ce livre est disponible. Veuillez emprunter directement.");
        }

        // Trouver un exemplaire non disponible pour la réservation
        Exemplaire exemplaireNonDisponible = exemplaires.stream()
                .filter(e -> e.getStatut() != Exemplaire.StatutExemplaire.DISPONIBLE)
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Aucun exemplaire non disponible pour ce livre"));

        Reservation reservation = new Reservation();
        reservation.setIdAdherant(idAdherant);
        reservation.setIdExemplaire(exemplaireNonDisponible.getId());
        reservation.setDateReservation(dateReservation);
        reservation.setDateDemande(LocalDateTime.now());
        reservation.setStatut(Reservation.StatutReservation.EN_ATTENTE);

        reservationRepository.save(reservation);
        logger.info("Réservation créée pour adhérant id={} et exemplaire id={}, date_demande={}", 
                    idAdherant, exemplaireNonDisponible.getId(), reservation.getDateDemande());
    }

    @Transactional
    public void approuverReservation(Integer idReservation) {
        Reservation reservation = reservationRepository.findById(idReservation)
                .orElseThrow(() -> new IllegalArgumentException("Réservation non trouvée"));

        if (reservation.getStatut() != Reservation.StatutReservation.EN_ATTENTE) {
            throw new IllegalStateException("La réservation n'est pas en attente");
        }

        Adherant adherant = adherantRepository.findById(reservation.getIdAdherant())
                .orElseThrow(() -> new IllegalArgumentException("Adhérant non trouvé"));

        // Vérifier et décrémenter le quota
        if (adherant.getQuotaRestantReservation() <= 0) {
            throw new IllegalStateException("Quota de réservations dépassé");
        }
        int ancienQuota = adherant.getQuotaRestantReservation();
        adherant.setQuotaRestantReservation(ancienQuota - 1);
        adherantRepository.save(adherant);
        logger.info("Quota de réservations décrémenté pour adhérant id={} : {} -> {}", 
                    adherant.getIdAdherant(), ancienQuota, adherant.getQuotaRestantReservation());

        reservation.setStatut(Reservation.StatutReservation.HONOREE);
        reservationRepository.save(reservation);

        // Mettre à jour le statut de l'exemplaire à RESERVE si ce n'est pas déjà EMPRUNTE
        Exemplaire exemplaire = exemplaireRepository.findById(reservation.getIdExemplaire())
                .orElseThrow(() -> new IllegalArgumentException("Exemplaire non trouvé"));
        if (exemplaire.getStatut() != Exemplaire.StatutExemplaire.EMPRUNTE) {
            exemplaire.setStatut(Exemplaire.StatutExemplaire.RESERVE);
            exemplaireRepository.save(exemplaire);
        }
    }

    @Transactional
    public void refuserReservation(Integer idReservation) {
        Reservation reservation = reservationRepository.findById(idReservation)
                .orElseThrow(() -> new IllegalArgumentException("Réservation non trouvée"));

        if (reservation.getStatut() != Reservation.StatutReservation.EN_ATTENTE) {
            throw new IllegalStateException("La réservation n'est pas en attente");
        }

        reservation.setStatut(Reservation.StatutReservation.ANNULEE);
        reservationRepository.save(reservation);

        Exemplaire exemplaire = exemplaireRepository.findById(reservation.getIdExemplaire())
                .orElseThrow(() -> new IllegalArgumentException("Exemplaire non trouvé"));
        boolean hasOtherReservations = reservationRepository.hasActiveReservation(exemplaire.getId());
        if (!hasOtherReservations && exemplaire.getStatut() == Exemplaire.StatutExemplaire.RESERVE) {
            exemplaire.setStatut(Exemplaire.StatutExemplaire.DISPONIBLE);
            exemplaireRepository.save(exemplaire);
        }
    }

    public List<Reservation> getAllPendingReservations() {
        return reservationRepository.findAllPendingReservations();
    }
}
ReservationRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Reservation;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ReservationRepository extends JpaRepository<Reservation, Integer> {

    @Query("SELECT COUNT(r) > 0 FROM Reservation r WHERE r.idExemplaire = :exemplaireId AND r.statut IN ('EN_ATTENTE', 'HONOREE')")
    boolean hasActiveReservation(@Param("exemplaireId") Integer exemplaireId);

    @Query("SELECT COUNT(r) > 0 FROM Reservation r WHERE r.idExemplaire = :exemplaireId AND r.statut = 'HONOREE'")
    boolean hasHonoredReservation(@Param("exemplaireId") Integer exemplaireId);

    @Query("SELECT COUNT(r) > 0 FROM Reservation r WHERE r.idExemplaire = :exemplaireId AND r.statut = 'EN_ATTENTE' AND r.dateDemande < :dateDemande")
    boolean hasActiveReservationBeforeDate(@Param("exemplaireId") Integer exemplaireId, @Param("dateDemande") LocalDateTime dateDemande);

    @Query("SELECT COUNT(r) FROM Reservation r WHERE r.idAdherant = :idAdherant AND r.statut = 'EN_ATTENTE'")
    int countActiveReservationsByAdherantId(@Param("idAdherant") Integer idAdherant);

    @Query("SELECT r FROM Reservation r WHERE r.idExemplaire = :exemplaireId AND r.statut = 'EN_ATTENTE' ORDER BY r.dateDemande ASC, r.id ASC")
    Reservation findFirstActiveReservationByExemplaireId(@Param("exemplaireId") Integer exemplaireId);

    @Query("SELECT r FROM Reservation r WHERE r.statut = 'EN_ATTENTE' ORDER BY r.dateDemande ASC, r.id ASC")
    List<Reservation> findAllPendingReservations();

    @Query("SELECT r FROM Reservation r WHERE r.idAdherant = :idAdherant AND r.statut = :statut")
    List<Reservation> findAllByAdherantIdAndStatut(@Param("idAdherant") Integer idAdherant, @Param("statut") Reservation.StatutReservation statut);

    @Query("SELECT r FROM Reservation r WHERE r.idExemplaire = :exemplaireId AND r.statut IN ('EN_ATTENTE', 'HONOREE') " +
           "ORDER BY CASE WHEN r.statut = 'HONOREE' THEN 0 ELSE 1 END, r.dateDemande ASC, r.id ASC FETCH FIRST 1 ROWS ONLY")
    Reservation findTopPriorityReservationByExemplaireId(@Param("exemplaireId") Integer exemplaireId);
}
ReservationController:
package com.example.biblio.controller;

import com.example.biblio.model.Reservation;
import com.example.biblio.repository.AdherantRepository;
import com.example.biblio.repository.ExemplaireRepository;
import com.example.biblio.repository.LivreRepository;
import com.example.biblio.repository.ReservationRepository;
import com.example.biblio.service.ReservationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/reservations")
public class ReservationController {

    private static final Logger logger = LoggerFactory.getLogger(ReservationController.class);

    @Autowired
    private ReservationService reservationService;

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private AdherantRepository adherantRepository;

    @Autowired
    private ExemplaireRepository exemplaireRepository;

    @Autowired
    private LivreRepository livreRepository;


    @GetMapping("/liste")
    public String listReservations(Model model) {
        List<Reservation> reservationsEnAttente = reservationRepository.findAllPendingReservations();
        model.addAttribute("reservationsEnAttente", reservationsEnAttente);
        model.addAttribute("adherantRepository", adherantRepository);
        model.addAttribute("exemplaireRepository", exemplaireRepository);
        model.addAttribute("livreRepository", livreRepository);
        return "liste-reservations";
    }

    @PostMapping("/approuver")
    public String approuverReservation(@RequestParam Integer idReservation, Model model) {
        try {
            reservationService.approuverReservation(idReservation);
            return "redirect:/reservations/liste?success=approuver";
        } catch (IllegalArgumentException | IllegalStateException e) {
            logger.error("Erreur lors de l'approbation de la réservation : {}", e.getMessage());
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("reservationsEnAttente", reservationRepository.findAllPendingReservations());
            model.addAttribute("adherantRepository", adherantRepository);
            model.addAttribute("exemplaireRepository", exemplaireRepository);
            model.addAttribute("livreRepository", livreRepository);
            return "liste-reservations";
        }
    }

    @PostMapping("/refuser")
    public String refuserReservation(@RequestParam Integer idReservation, Model model) {
        try {
            reservationService.refuserReservation(idReservation);
            return "redirect:/reservations/liste?success=refuser";
        } catch (IllegalArgumentException | IllegalStateException e) {
            logger.error("Erreur lors du refus de la réservation : {}", e.getMessage());
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("reservationsEnAttente", reservationRepository.findAllPendingReservations());
            model.addAttribute("adherantRepository", adherantRepository);
            model.addAttribute("exemplaireRepository", exemplaireRepository);
            model.addAttribute("livreRepository", livreRepository);
            return "liste-reservations";
        }
    }
}
prends exemple sur ces formulurais pour la page:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<c:set var="pageTitle" value="Prêter un livre" scope="request"/>
<!-- <c:set var="contentPage" value="/WEB-INF/views/preterLivre.jsp" scope="request"/> -->
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Prêter un livre</h2>

        <c:if test="${not empty errorMessage}">
            <p class="error-message">${errorMessage}</p>
        </c:if>
        <c:if test="${not empty successMessage}">
            <p class="success-message">${successMessage}</p>
        </c:if>
        <c:if test="${not empty sessionScope.penaltyMessage}">
            <p class="penalty-message">${sessionScope.penaltyMessage}</p>
            <c:remove var="penaltyMessage" scope="session"/>
        </c:if>

        <form action="/prets" method="post">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="number" id="idAdherant" name="idAdherant" class="form-control" placeholder="Référence de l'adhérant" required>
                        <label for="idAdherant">Référence de l'adhérant</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <select id="idLivre" name="idLivre" class="form-select" required>
                            <option value="">-- Sélectionner un livre --</option>
                            <c:forEach var="livre" items="${livres}">
                                <option value="${livre.id}">${livre.titre}</option>
                            </c:forEach>
                        </select>
                        <label for="idLivre">Livre</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <select id="typePret" name="typePret" class="form-select" required>
                            <option value="LECTURE_SUR_PLACE">Lecture sur place</option>
                            <option value="A_EMPORTER">À emporter</option>
                        </select>
                        <label for="typePret">Type de prêt</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="date" id="datePret" name="datePret" class="form-control" placeholder="Date du prêt" required>
                        <label for="datePret">Date du prêt</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <button type="submit" class="btn btn-primary w-100">Prêter</button>
                </div>
                <div class="col-md-6">
                    <button type="reset" class="btn btn-secondary w-100">Réinitialiser</button>
                </div>
            </div>
        </form>
    </div>
</div>


Il peut pas reserver un exemplaire qu'il a deja reservé lui même

Dans la liste des livres si l'exemplaire est reservé par l'adherant connecté, dans statut il devrait avoir "reservé par vous" et le bouton reserver s'enleve

Quand c'est emprunté par l'adherant connecté,il ne peut plus reserver et statut "emprunté par vous"
