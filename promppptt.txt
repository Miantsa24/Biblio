J'ai un projet de gestion de bibliotheque utilisant comme technologie spring et comme base mysql, jsp jstl pour l'interface utilisateur
J'ai plusieurs fonctionnalités pour le côté bibliothécaire comme "Ajouter un adhérant", "Preter un livre", "Rendre un livre", "Gérer les jours fériés", "Renouveler un abonnement", "Gerer les pénalités", "Approbation ou refus des reservations en attente"
Ce que j'aimerais que tu rajoutes à mon code, c'est un login de connexion pour le bibliothécaire, personne d'autre à part l'admin bibliothécaire ne peut accéder à ce site et ces fonctionnalités
J'aimerais que tu fasses seulement ce que je te dit, juste le login d'un admin
Voici la base, rajoute une table admin avec un nom, un email et un mdp que l'admin pourr a utilisé pour se connecter, ce sont des données fixes qu'on insèrera dans la base
Ne changes pas ma base inutilement, rajoute juste la table admin
la base:
-- Création de la base de données
CREATE DATABASE biblio;
USE biblio;

-- Table des livres
CREATE TABLE Livre (
    id_livre INT AUTO_INCREMENT PRIMARY KEY,
    titre VARCHAR(255) NOT NULL,
    auteur VARCHAR(255),
    age_minimum INT NOT NULL DEFAULT 0, -- Âge minimum requis pour emprunter (ex. 18 pour certains livres)
    isbn VARCHAR(13) UNIQUE
);

-- Table des exemplaires
CREATE TABLE Exemplaire (
    id_exemplaire INT AUTO_INCREMENT PRIMARY KEY,
    id_livre INT NOT NULL,
    statut ENUM('DISPONIBLE', 'EMPRUNTE', 'RESERVE') NOT NULL DEFAULT 'DISPONIBLE',
    FOREIGN KEY (id_livre) REFERENCES Livre(id_livre) ON DELETE CASCADE
);

-- Table des types d'adhérants
CREATE TABLE TypeAdherant (
    id_type_adherant INT AUTO_INCREMENT PRIMARY KEY,
    nom_type VARCHAR(255) UNIQUE NOT NULL,
    quota_emprunts INT NOT NULL,
    quota_reservations INT NOT NULL,
    quota_prolongements INT NOT NULL
);

-- Table des adhérants
CREATE TABLE Adherant (
    id_adherant INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(255) NOT NULL,
    prenom VARCHAR(255) NOT NULL,
    date_naissance DATE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    mot_de_passe VARCHAR(255) NOT NULL,
    id_type_adherant INT NOT NULL,
    quota_restant INT NOT NULL DEFAULT 0, -- Nombre d'emprunts restants (initialisé via AdherantService)
    FOREIGN KEY (id_type_adherant) REFERENCES TypeAdherant(id_type_adherant) ON DELETE RESTRICT
);

-- Table des abonnements
CREATE TABLE Abonnement (
    id_abonnement INT AUTO_INCREMENT PRIMARY KEY,
    id_adherant INT NOT NULL,
    date_debut DATE NOT NULL,
    date_fin DATE NOT NULL,
    CHECK (date_fin > date_debut),
    FOREIGN KEY (id_adherant) REFERENCES Adherant(id_adherant) ON DELETE CASCADE
);

-- Table des prêts
CREATE TABLE Pret (
    id_pret INT AUTO_INCREMENT PRIMARY KEY,
    id_exemplaire INT NOT NULL,
    id_adherant INT NOT NULL,
    date_pret DATE NOT NULL,
    date_retour_prevue DATE NOT NULL,
    date_retour_reelle DATE,
    type_pret ENUM('LECTURE_SUR_PLACE', 'A_EMPORTER') NOT NULL,
    nombre_prolongements INT DEFAULT 0,
    CHECK (date_retour_prevue >= date_pret),
    FOREIGN KEY (id_exemplaire) REFERENCES Exemplaire(id_exemplaire) ON DELETE CASCADE,
    FOREIGN KEY (id_adherant) REFERENCES Adherant(id_adherant) ON DELETE CASCADE
);

-- Table des réservations
CREATE TABLE Reservation (
    id_reservation INT AUTO_INCREMENT PRIMARY KEY,
    id_exemplaire INT NOT NULL,
    id_adherant INT NOT NULL,
    date_reservation DATE NOT NULL,
    statut ENUM('EN_ATTENTE', 'HONOREE', 'ANNULEE') NOT NULL DEFAULT 'EN_ATTENTE',
    FOREIGN KEY (id_exemplaire) REFERENCES Exemplaire(id_exemplaire) ON DELETE CASCADE,
    FOREIGN KEY (id_adherant) REFERENCES Adherant(id_adherant) ON DELETE CASCADE
);

-- Table des pénalités
CREATE TABLE Penalite (
    id_penalite INT AUTO_INCREMENT PRIMARY KEY,
    id_adherant INT NOT NULL,
    id_pret INT, -- Lien vers le prêt spécifique (facultatif)
    type_penalite ENUM('RETARD') NOT NULL,
    date_debut_penalite DATE NOT NULL,
    nombre_jours INT NOT NULL,
    date_fin_penalite DATE NOT NULL,
    CHECK (date_fin_penalite >= date_debut_penalite),
    FOREIGN KEY (id_adherant) REFERENCES Adherant(id_adherant) ON DELETE CASCADE,
    FOREIGN KEY (id_pret) REFERENCES Pret(id_pret) ON DELETE SET NULL
);

-- Table des jours fériés
CREATE TABLE JourFerier (
    id_jour_ferier INT AUTO_INCREMENT PRIMARY KEY,
    date_ferier DATE NOT NULL UNIQUE,
    description VARCHAR(255)
);

-- Données pour TypeAdherant
INSERT INTO TypeAdherant (nom_type, quota_emprunts, quota_reservations, quota_prolongements)
VALUES ('étudiant', 3, 2, 2),
       ('professionnel', 5, 3, 2),
       ('professeur', 5, 5, 3);

INSERT INTO Livre (titre, auteur, age_minimum, isbn)
VALUES 
    ('Le Petit Prince', 'Antoine de Saint-Exupéry', 0, '9781234567890'),
    ('1984', 'George Orwell', 16, '9780987654321'),
    ('Harry Potter', 'J.K. Rowling', 10, '9781122334455');

    INSERT INTO Exemplaire (id_livre, statut)
VALUES 
    (1, 'DISPONIBLE'),
    (1, 'DISPONIBLE'),
    (2, 'DISPONIBLE'),
    (2, 'DISPONIBLE'),
    (3, 'DISPONIBLE');
Gere bien les mapping des routes parce qu'ici dans mon projet ce qui est à la racine du projet c'est index.jsp qui est messae de Bienvenue
Dans mapping de index il y a "/" ou "/index", tu peux enlever le "/" et utiliser que le "/index" et utilser "/" pour la page de connexion car c'est le connexion qu'on devrait voir en premier
Mais encore une fois ne change pas inutilement mon code et respecte ce que je te demande, faisons tout ça par étape
Voici tous mes controllers, je t'envoie tout juste en guise de renseignement mais change ou rajoute uniquement ce qui doit l'être
AdherantController:
package com.example.biblio.controller;

import com.example.biblio.model.Adherant;
import com.example.biblio.model.TypeAdherant;
import com.example.biblio.repository.AdherantRepository;
import com.example.biblio.repository.TypeAdherantRepository;
import com.example.biblio.service.AdherantService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;

@Controller
public class AdherantController {

    private static final Logger logger = LoggerFactory.getLogger(AdherantController.class);

    @Autowired
    private AdherantService adherantService;

    @Autowired
    private TypeAdherantRepository typeAdherantRepository;

    @Autowired
    private AdherantRepository adherantRepository;

    @GetMapping("/ajouter")
    public String afficherFormulaireAjout(Model model, @RequestParam(value = "success", required = false) String success) {
        try {
            List<TypeAdherant> types = typeAdherantRepository.findAll();
            model.addAttribute("typesAdherant", types);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des TypeAdherant : {}", e.getMessage(), e);
            model.addAttribute("errorMessage", "Erreur lors du chargement des types d'adhérants.");
            model.addAttribute("typesAdherant", Collections.emptyList());
        }

        String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        model.addAttribute("now", formattedDate);
        if ("true".equals(success)) {
            model.addAttribute("successMessage", "Adhérant ajouté avec succès !");
        }
        return "ajouter-adherant";
    }

    @PostMapping("/ajouter")
    public String ajouterAdherant(@RequestParam String nom,
                                  @RequestParam String prenom,
                                  @RequestParam String dateNaissance,
                                  @RequestParam String email,
                                  @RequestParam String nomTypeAdherant,
                                  @RequestParam String motDePasse,
                                  @RequestParam String dateDebutAbonnement,
                                  Model model) {
        try {
            adherantService.ajouterAdherant(
                nom, prenom, LocalDate.parse(dateNaissance), email, nomTypeAdherant,
                motDePasse, LocalDate.parse(dateDebutAbonnement));
            return "redirect:/ajouter?success=true";
        } catch (IllegalArgumentException e) {
            logger.error("Erreur lors de l'ajout de l'adhérant : {}", e.getMessage(), e);
            model.addAttribute("errorMessage", e.getMessage());
            try {
                model.addAttribute("typesAdherant", typeAdherantRepository.findAll());
            } catch (Exception ex) {
                logger.error("Erreur lors de la récupération des TypeAdherant (POST) : {}", ex.getMessage(), ex);
                model.addAttribute("typesAdherant", Collections.emptyList());
                model.addAttribute("errorMessage", "Erreur lors du chargement des types d'adhérants : " + ex.getMessage());
            }
            String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            model.addAttribute("now", formattedDate);
            return "ajouter-adherant";
        }
    }

    @GetMapping("/adherants")
    public String listAdherants(Model model) {
        try {
            LocalDate currentDate = LocalDate.now();
            logger.info("Récupération des adhérants avec abonnement valide au : {}", currentDate);
            List<Adherant> adherants = adherantRepository.findAllWithValidAbonnement(currentDate);
            for (Adherant adherant : adherants) {
                adherant.getAbonnements().size();
                logger.debug("Adhérant ID: {}, Nom: {}, Abonnements: {}", 
                             adherant.getIdAdherant(), adherant.getNom() + " " + adherant.getPrenom(), adherant.getAbonnements());
            }
            logger.info("Adhérants avec abonnement valide trouvés : {}", adherants.size());
            model.addAttribute("adherants", adherants);
            model.addAttribute("currentDate", currentDate);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des Adhérants : {}", e.getMessage(), e);
            model.addAttribute("errorMessage", "Erreur lors du chargement des adhérants.");
            model.addAttribute("adherants", Collections.emptyList());
        }
        return "liste-adherants";
    }

    @GetMapping("/renouveler")
    public String afficherFormulaireRenouvellement(Model model, @RequestParam(value = "success", required = false) String success) {
        String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        model.addAttribute("now", formattedDate);
        if ("true".equals(success)) {
            model.addAttribute("successMessage", "Abonnement renouvelé avec succès !");
        }
        return "renouveler-abonnement";
    }

    @PostMapping("/renouveler")
    public String renouvelerAbonnement(@RequestParam Integer idAdherant,
                                      @RequestParam String dateDebutAbonnement,
                                      Model model) {
        try {
            adherantService.renouvelerAbonnement(idAdherant, LocalDate.parse(dateDebutAbonnement));
            return "redirect:/renouveler?success=true";
        } catch (IllegalArgumentException e) {
            logger.error("Erreur lors du renouvellement de l'abonnement : {}", e.getMessage(), e);
            model.addAttribute("errorMessage", e.getMessage());
            String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            model.addAttribute("now", formattedDate);
            return "renouveler-abonnement";
        }
    }
}
IndexController:
package com.example.biblio.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class IndexController {

    @GetMapping({"/", "/index"})
    public String home(Model model) {
        return "index";
    }
}
JourFerierController:
package com.example.biblio.controller;

import com.example.biblio.model.JourFerier;
import com.example.biblio.repository.JourFerierRepository;
import com.example.biblio.service.JourFerierService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Controller
@RequestMapping("/jours-feries")
public class JourFerierController {

    private static final Logger logger = LoggerFactory.getLogger(JourFerierController.class);

    @Autowired
    private JourFerierService jourFerierService;

    @Autowired
    private JourFerierRepository jourFerierRepository;

    @GetMapping
    public String afficherFormulaireEtListe(Model model, @RequestParam(value = "success", required = false) String success) {
        // Charger la liste des jours fériés
        List<JourFerier> joursFeries = jourFerierRepository.findAll();
        logger.info("Jours fériés récupérés : {}", joursFeries);
        model.addAttribute("joursFeries", joursFeries);

        // Ajouter la date actuelle pour le formulaire
        String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        model.addAttribute("today", formattedDate);

        // Message de succès si applicable
        if ("true".equals(success)) {
            model.addAttribute("successMessage", "Jour férié ajouté avec succès !");
        }

        return "gerer-jours-feries";
    }

    @PostMapping
    public String ajouterJourFerier(@RequestParam String dateFerier,
                                    @RequestParam(required = false) String description,
                                    Model model) {
        try {
            jourFerierService.ajouterJourFerier(LocalDate.parse(dateFerier), description);
            logger.info("Jour férié ajouté : date={}, description={}", dateFerier, description);
            return "redirect:/jours-feries?success=true";
        } catch (IllegalArgumentException e) {
            logger.error("Erreur lors de l'ajout du jour férié : {}", e.getMessage());
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("joursFeries", jourFerierRepository.findAll());
            String formattedDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            model.addAttribute("today", formattedDate);
            return "gerer-jours-feries";
        }
    }
}
PenaliteController:
package com.example.biblio.controller;

import com.example.biblio.model.Penalite;
import com.example.biblio.service.PenaliteService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.List;

@Controller
@RequestMapping("/penalites")
public class PenaliteController {

    private static final Logger logger = LoggerFactory.getLogger(PenaliteController.class);

    @Autowired
    private PenaliteService penaliteService;

    @GetMapping
    public String afficherPenalitesEnCours(Model model) {
        List<Penalite> penalites = penaliteService.getPenalitesEnCours();
        logger.info("Pénalités en cours récupérées : {}", penalites);
        model.addAttribute("penalites", penalites);
        return "penalitesEnCours";
    }
}
PretController:

package com.example.biblio.controller;

import com.example.biblio.model.Livre;
import com.example.biblio.model.Pret;
import com.example.biblio.repository.LivreRepository;
import com.example.biblio.repository.PretRepository;
import com.example.biblio.service.PretService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@Controller
@RequestMapping("/prets")
public class PretController {

    @Autowired
    private PretService pretService;

    @Autowired
    private LivreRepository livreRepository;

    @Autowired
    private PretRepository pretRepository;

    @GetMapping
    public String afficherFormulairePret(Model model, @RequestParam(value = "success", required = false) String success) {
        List<Livre> livres = livreRepository.findAll();
        model.addAttribute("livres", livres);
        if ("true".equals(success)) {
            model.addAttribute("successMessage", "Livre prêté avec succès !");
        }
        return "preterLivre";
    }

    @PostMapping
    public String preterLivre(@RequestParam Integer idAdherant,
                              @RequestParam Integer idLivre,
                              @RequestParam String typePret,
                              @RequestParam String datePret,
                              Model model) {
        try {
            pretService.preterLivre(idAdherant, idLivre, typePret, LocalDate.parse(datePret));
            return "redirect:/prets?success=true";
        } catch (IllegalArgumentException | IllegalStateException e) {
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("livres", livreRepository.findAll());
            return "preterLivre";
        }
    }

    @GetMapping("/liste")
    public String listPrets(Model model) {
        List<Pret> pretsEnCours = pretRepository.findAllByDateRetourReelleIsNull();
        model.addAttribute("pretsEnCours", pretsEnCours);
        return "liste-prets";
    }
}
RendreLivreController:

package com.example.biblio.controller;

import com.example.biblio.service.RendreLivreService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

@Controller
@RequestMapping("/retours")
public class RendreLivreController {

    private static final Logger logger = LoggerFactory.getLogger(RendreLivreController.class);

    @Autowired
    private RendreLivreService rendreLivreService;

    @GetMapping
    public String afficherFormulaireRetour(Model model, HttpSession session) {
        String penaltyMessage = (String) session.getAttribute("penaltyMessage");
        if (penaltyMessage != null) {
            model.addAttribute("penaltyMessage", penaltyMessage);
            session.removeAttribute("penaltyMessage");
        }
        return "rendreLivre";
    }

    @PostMapping
    public String rendreLivre(@RequestParam Integer idAdherant,
                              @RequestParam Integer idExemplaire,
                              @RequestParam String dateRetourReelle,
                              Model model,
                              HttpSession session) {
        try {
            LocalDate parsedDateRetourReelle;
            try {
                parsedDateRetourReelle = LocalDate.parse(dateRetourReelle);
                logger.info("Date retour réelle reçue (YYYY-MM-DD): {}, parsée: {}", dateRetourReelle, parsedDateRetourReelle);
            } catch (DateTimeParseException e) {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                parsedDateRetourReelle = LocalDate.parse(dateRetourReelle, formatter);
                logger.info("Date retour réelle reçue (DD/MM/YYYY): {}, parsée: {}", dateRetourReelle, parsedDateRetourReelle);
            }

            LocalDate dateFinPenalite = rendreLivreService.rendreLivre(idAdherant, idExemplaire, parsedDateRetourReelle);
            if (dateFinPenalite != null) {
                session.setAttribute("penaltyMessage", "Livre rendu avec succès, mais vous êtes pénalisé jusqu'au " + dateFinPenalite);
            } else {
                session.setAttribute("penaltyMessage", "Livre rendu avec succès !");
            }
            return "redirect:/retours?success=true";
        } catch (DateTimeParseException e) {
            logger.error("Erreur de parsing de la date: {}", dateRetourReelle, e);
            model.addAttribute("errorMessage", "Format de date invalide. Utilisez YYYY-MM-DD ou DD/MM/YYYY.");
            return "rendreLivre";
        } catch (IllegalArgumentException | IllegalStateException e) {
            logger.error("Erreur lors du retour: {}", e.getMessage());
            model.addAttribute("errorMessage", e.getMessage());
            return "rendreLivre";
        } catch (Exception e) {
            logger.error("Erreur inattendue lors du retour du livre: {}", e.getMessage(), e);
            model.addAttribute("errorMessage", "Une erreur inattendue s'est produite. Veuillez réessayer ou contacter l'administrateur.");
            return "rendreLivre";
        }
    }
}
Voici les model entités qui correspondent à la base: 
Abonnement:

package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "abonnement")
public class Abonnement {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_abonnement")
    private Long idAbonnement;

    @ManyToOne
    @JoinColumn(name = "id_adherant", nullable = false)
    private Adherant adherant;

    @Column(name = "date_debut", nullable = false)
    private LocalDate dateDebut;

    @Column(name = "date_fin", nullable = false)
    private LocalDate dateFin;

    // Constructeurs
    public Abonnement() {
    }

    public Abonnement(Adherant adherant, LocalDate dateDebut, LocalDate dateFin) {
        this.adherant = adherant;
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
    }

    // Getters et Setters
    public Long getIdAbonnement() {
        return idAbonnement;
    }

    public void setIdAbonnement(Long idAbonnement) {
        this.idAbonnement = idAbonnement;
    }

    public Adherant getAdherant() {
        return adherant;
    }

    public void setAdherant(Adherant adherant) {
        this.adherant = adherant;
    }

    public LocalDate getDateDebut() {
        return dateDebut;
    }

    public void setDateDebut(LocalDate dateDebut) {
        this.dateDebut = dateDebut;
    }

    public LocalDate getDateFin() {
        return dateFin;
    }

    public void setDateFin(LocalDate dateFin) {
        this.dateFin = dateFin;
    }
}
Adherant:
package com.example.biblio.model;


import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.List;

@Entity
@Table(name = "Adherant")
public class Adherant {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_adherant")
    private Integer idAdherant;

    @Column(name = "nom", nullable = false)
    private String nom;

    @Column(name = "prenom", nullable = false)
    private String prenom;

    @Column(name = "date_naissance", nullable = false)
    private LocalDate dateNaissance;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @Column(name = "mot_de_passe", nullable = false)
    private String motDePasse;

    @ManyToOne
    @JoinColumn(name = "id_type_adherant", nullable = false)
    private TypeAdherant typeAdherant;

    @Column(name = "quota_restant", nullable = false)
    private Integer quotaRestant;

    @OneToMany(mappedBy = "adherant")
    private List<Abonnement> abonnements;

    public Adherant() {}

    public Adherant(String nom, String prenom, LocalDate dateNaissance, String email, TypeAdherant typeAdherant, String motDePasse) {
        this.nom = nom;
        this.prenom = prenom;
        this.dateNaissance = dateNaissance;
        this.email = email;
        this.typeAdherant = typeAdherant;
        this.motDePasse = motDePasse;
    }

    public Integer getIdAdherant() {
        return idAdherant;
    }

    public void setIdAdherant(Integer idAdherant) {
        this.idAdherant = idAdherant;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getPrenom() {
        return prenom;
    }

    public void setPrenom(String prenom) {
        this.prenom = prenom;
    }

    public LocalDate getDateNaissance() {
        return dateNaissance;
    }

    public void setDateNaissance(LocalDate dateNaissance) {
        this.dateNaissance = dateNaissance;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getMotDePasse() {
        return motDePasse;
    }

    public void setMotDePasse(String motDePasse) {
        this.motDePasse = motDePasse;
    }

    public TypeAdherant getTypeAdherant() {
        return typeAdherant;
    }

    public void setTypeAdherant(TypeAdherant typeAdherant) {
        this.typeAdherant = typeAdherant;
    }

    public Integer getQuotaRestant() {
        return quotaRestant;
    }

    public void setQuotaRestant(Integer quotaRestant) {
        this.quotaRestant = quotaRestant;
    }

    public List<Abonnement> getAbonnements() {
        return abonnements;
    }

    public void setAbonnements(List<Abonnement> abonnements) {
        this.abonnements = abonnements;
    }

    public boolean hasValidAbonnement(LocalDate date) {
        if (abonnements == null) return false;
        return abonnements.stream()
                .anyMatch(abonnement -> !date.isBefore(abonnement.getDateDebut()) && !date.isAfter(abonnement.getDateFin()));
    }
}
Exemplaire:
package com.example.biblio.model;

import jakarta.persistence.*;

@Entity
@Table(name = "Exemplaire")
public class Exemplaire {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_exemplaire")
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_livre", nullable = false)
    private Livre livre;

    @Enumerated(EnumType.STRING)
    @Column(name = "statut", nullable = false)
    private StatutExemplaire statut = StatutExemplaire.DISPONIBLE;

    public enum StatutExemplaire {
        DISPONIBLE, EMPRUNTE, RESERVE
    }

    public Exemplaire() {}

    public Exemplaire(Livre livre, StatutExemplaire statut) {
        this.livre = livre;
        this.statut = statut;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Livre getLivre() {
        return livre;
    }

    public void setLivre(Livre livre) {
        this.livre = livre;
    }

    public Integer getIdLivre() {
        return livre != null ? livre.getId() : null;
    }

    public void setIdLivre(Integer idLivre) {
        if (idLivre != null) {
            this.livre = new Livre();
            this.livre.setId(idLivre);
        } else {
            this.livre = null;
        }
    }

    public StatutExemplaire getStatut() {
        return statut;
    }

    public void setStatut(StatutExemplaire statut) {
        this.statut = statut;
    }
}
JourFerier:

package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "JourFerier")
public class JourFerier {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_jour_ferier")
    private Integer idJourFerier;

    @Column(name = "date_ferier", nullable = false, unique = true)
    private LocalDate dateFerier;

    @Column(name = "description")
    private String description;

    // Getters et setters
    public Integer getIdJourFerier() {
        return idJourFerier;
    }

    public void setIdJourFerier(Integer idJourFerier) {
        this.idJourFerier = idJourFerier;
    }

    public LocalDate getDateFerier() {
        return dateFerier;
    }

    public void setDateFerier(LocalDate dateFerier) {
        this.dateFerier = dateFerier;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}
Livre:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "Livre")
public class Livre {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_livre")
    private Integer id;

    @Column(name = "titre", nullable = false)
    private String titre;

    @Column(name = "auteur")
    private String auteur;

    @Column(name = "age_minimum", nullable = false)
    private int ageMinimum;

    @Column(name = "isbn", unique = true)
    private String isbn;

    @OneToMany(mappedBy = "livre")
    private Set<Exemplaire> exemplaires = new HashSet<>();

    public Livre() {}

    public Livre(String titre, String auteur, int ageMinimum, String isbn) {
        this.titre = titre;
        this.auteur = auteur;
        this.ageMinimum = ageMinimum;
        this.isbn = isbn;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTitre() {
        return titre;
    }

    public void setTitre(String titre) {
        this.titre = titre;
    }

    public String getAuteur() {
        return auteur;
    }

    public void setAuteur(String auteur) {
        this.auteur = auteur;
    }

    public int getAgeMinimum() {
        return ageMinimum;
    }

    public void setAgeMinimum(int ageMinimum) {
        this.ageMinimum = ageMinimum;
    }

    public String getIsbn() {
        return isbn;
    }

    public void setIsbn(String isbn) {
        this.isbn = isbn;
    }

    public Set<Exemplaire> getExemplaires() {
        return exemplaires;
    }

    public void setExemplaires(Set<Exemplaire> exemplaires) {
        this.exemplaires = exemplaires;
    }
}
Penalite:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "Penalite")
public class Penalite {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_penalite")
    private Integer id;

    @ManyToOne
    @JoinColumn(name = "id_adherant", nullable = false)
    private Adherant adherant;

    @ManyToOne
    @JoinColumn(name = "id_pret")
    private Pret pret;

    @Enumerated(EnumType.STRING)
    @Column(name = "type_penalite", nullable = false)
    private TypePenalite typePenalite;

    @Column(name = "date_debut_penalite", nullable = false)
    private LocalDate dateDebutPenalite;

    @Column(name = "nombre_jours", nullable = false)
    private Integer nombreJours;

    @Column(name = "date_fin_penalite", nullable = false)
    private LocalDate dateFinPenalite;

    public enum TypePenalite {
        RETARD
    }

    public Penalite() {}

    public Penalite(Adherant adherant, Pret pret, TypePenalite typePenalite, LocalDate dateDebutPenalite, Integer nombreJours, LocalDate dateFinPenalite) {
        this.adherant = adherant;
        this.pret = pret;
        this.typePenalite = typePenalite;
        this.dateDebutPenalite = dateDebutPenalite;
        this.nombreJours = nombreJours;
        this.dateFinPenalite = dateFinPenalite;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Adherant getAdherant() {
        return adherant;
    }

    public void setAdherant(Adherant adherant) {
        this.adherant = adherant;
    }

    public Pret getPret() {
        return pret;
    }

    public void setPret(Pret pret) {
        this.pret = pret;
    }

    public TypePenalite getTypePenalite() {
        return typePenalite;
    }

    public void setTypePenalite(TypePenalite typePenalite) {
        this.typePenalite = typePenalite;
    }

    public LocalDate getDateDebutPenalite() {
        return dateDebutPenalite;
    }

    public void setDateDebutPenalite(LocalDate dateDebutPenalite) {
        this.dateDebutPenalite = dateDebutPenalite;
    }

    public Integer getNombreJours() {
        return nombreJours;
    }

    public void setNombreJours(Integer nombreJours) {
        this.nombreJours = nombreJours;
    }

    public LocalDate getDateFinPenalite() {
        return dateFinPenalite;
    }

    public void setDateFinPenalite(LocalDate dateFinPenalite) {
        this.dateFinPenalite = dateFinPenalite;
    }
}
Pret:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "Pret")
public class Pret {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_pret")
    private Integer id;

    @ManyToOne
    @JoinColumn(name = "id_exemplaire", nullable = false)
    private Exemplaire exemplaire;

    @ManyToOne
    @JoinColumn(name = "id_adherant", nullable = false)
    private Adherant adherant;

    @Column(name = "date_pret", nullable = false)
    private LocalDate datePret;

    @Column(name = "date_retour_prevue", nullable = false)
    private LocalDate dateRetourPrevue;

    @Column(name = "date_retour_reelle")
    private LocalDate dateRetourReelle;

    @Enumerated(EnumType.STRING)
    @Column(name = "type_pret", nullable = false)
    private TypePret typePret;

    @Column(name = "nombre_prolongements")
    private Integer nombreProlongements = 0;

    public enum TypePret {
        LECTURE_SUR_PLACE, A_EMPORTER
    }

    public Pret() {}

    public Pret(Exemplaire exemplaire, Adherant adherant, LocalDate datePret, LocalDate dateRetourPrevue, TypePret typePret) {
        this.exemplaire = exemplaire;
        this.adherant = adherant;
        this.datePret = datePret;
        this.dateRetourPrevue = dateRetourPrevue;
        this.typePret = typePret;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Exemplaire getExemplaire() {
        return exemplaire;
    }

    public void setExemplaire(Exemplaire exemplaire) {
        this.exemplaire = exemplaire;
    }

    public Adherant getAdherant() {
        return adherant;
    }

    public void setAdherant(Adherant adherant) {
        this.adherant = adherant;
    }

    public LocalDate getDatePret() {
        return datePret;
    }

    public void setDatePret(LocalDate datePret) {
        this.datePret = datePret;
    }

    public LocalDate getDateRetourPrevue() {
        return dateRetourPrevue;
    }

    public void setDateRetourPrevue(LocalDate dateRetourPrevue) {
        this.dateRetourPrevue = dateRetourPrevue;
    }

    public LocalDate getDateRetourReelle() {
        return dateRetourReelle;
    }

    public void setDateRetourReelle(LocalDate dateRetourReelle) {
        this.dateRetourReelle = dateRetourReelle;
    }

    public TypePret getTypePret() {
        return typePret;
    }

    public void setTypePret(TypePret typePret) {
        this.typePret = typePret;
    }

    public Integer getNombreProlongements() {
        return nombreProlongements;
    }

    public void setNombreProlongements(Integer nombreProlongements) {
        this.nombreProlongements = nombreProlongements;
    }
}
Reservation:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "Reservation")
public class Reservation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_reservation")
    private Integer id;

    @ManyToOne
    @JoinColumn(name = "id_exemplaire", nullable = false)
    private Exemplaire exemplaire;

    @ManyToOne
    @JoinColumn(name = "id_adherant", nullable = false)
    private Adherant adherant;

    @Column(name = "date_reservation", nullable = false)
    private LocalDate dateReservation;

    @Enumerated(EnumType.STRING)
    @Column(name = "statut", nullable = false)
    private StatutReservation statut = StatutReservation.EN_ATTENTE;

    public enum StatutReservation {
        EN_ATTENTE, HONOREE, ANNULEE
    }

    public Reservation() {}

    public Reservation(Exemplaire exemplaire, Adherant adherant, LocalDate dateReservation, StatutReservation statut) {
        this.exemplaire = exemplaire;
        this.adherant = adherant;
        this.dateReservation = dateReservation;
        this.statut = statut;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Exemplaire getExemplaire() {
        return exemplaire;
    }

    public void setExemplaire(Exemplaire exemplaire) {
        this.exemplaire = exemplaire;
    }

    public Adherant getAdherant() {
        return adherant;
    }

    public void setAdherant(Adherant adherant) {
        this.adherant = adherant;
    }

    public LocalDate getDateReservation() {
        return dateReservation;
    }

    public void setDateReservation(LocalDate dateReservation) {
        this.dateReservation = dateReservation;
    }

    public StatutReservation getStatut() {
        return statut;
    }

    public void setStatut(StatutReservation statut) {
        this.statut = statut;
    }
}
TypeAdherant:
package com.example.biblio.model;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "Typeadherant")
public class TypeAdherant {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_type_adherant")
    private Integer id;

    @Column(name = "nom_type", nullable = false, unique = true)
    private String nomType;

    @Column(name = "quota_emprunts", nullable = false)
    private int quotaEmprunts;

    @Column(name = "quota_reservations", nullable = false)
    private int quotaReservations;

    @Column(name = "quota_prolongements", nullable = false)
    private int quotaProlongements;

    @OneToMany(mappedBy = "typeAdherant")
    private Set<Adherant> adherants = new HashSet<>();

    public TypeAdherant() {}

    public TypeAdherant(String nomType, int quotaEmprunts, int quotaReservations, int quotaProlongements) {
        this.nomType = nomType;
        this.quotaEmprunts = quotaEmprunts;
        this.quotaReservations = quotaReservations;
        this.quotaProlongements = quotaProlongements;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getNomType() {
        return nomType;
    }

    public void setNomType(String nomType) {
        this.nomType = nomType;
    }

    public int getQuotaEmprunts() {
        return quotaEmprunts;
    }

    public void setQuotaEmprunts(int quotaEmprunts) {
        this.quotaEmprunts = quotaEmprunts;
    }

    public int getQuotaReservations() {
        return quotaReservations;
    }

    public void setQuotaReservations(int quotaReservations) {
        this.quotaReservations = quotaReservations;
    }

    public int getQuotaProlongements() {
        return quotaProlongements;
    }

    public void setQuotaProlongements(int quotaProlongements) {
        this.quotaProlongements = quotaProlongements;
    }

    public Set<Adherant> getAdherants() {
        return adherants;
    }

    public void setAdherants(Set<Adherant> adherants) {
        this.adherants = adherants;
    }
}
Quant au repository, c'est là qu'on doit mettre les requetes avec l'annotation @Query
Voici les repository:
AbonnementRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Abonnement;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.Optional;

@Repository
public interface AbonnementRepository extends JpaRepository<Abonnement, Integer> {
    @Query("SELECT a FROM Abonnement a WHERE a.adherant.id = :adherantId AND a.dateFin >= :date ORDER BY a.dateFin DESC")
    Optional<Abonnement> findByAdherantIdAndDateFinAfter(Integer adherantId, LocalDate date);

    @Query("SELECT COUNT(p) > 0 FROM Penalite p WHERE p.adherant.id = :adherantId AND p.dateFinPenalite >= :currentDate")
    boolean hasActivePenalite(Integer adherantId, LocalDate currentDate);
}
AdherantRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Adherant;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;

@Repository
public interface AdherantRepository extends JpaRepository<Adherant, Integer> {
    boolean existsByEmail(String email);

    @Query("SELECT a FROM Adherant a WHERE EXISTS (SELECT ab FROM a.abonnements ab WHERE ab.dateFin > :currentDate)")
    List<Adherant> findAllWithValidAbonnement(LocalDate currentDate);
}
ExemplaireRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Exemplaire;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface ExemplaireRepository extends JpaRepository<Exemplaire, Integer> {
    @Query(value = "SELECT * FROM Exemplaire e WHERE e.id_livre = :idLivre AND e.statut = 'DISPONIBLE' LIMIT 1", nativeQuery = true)
    Optional<Exemplaire> findFirstByLivreIdAndStatutDisponible(Integer idLivre);
}
JourFerierRepository:
package com.example.biblio.repository;

import com.example.biblio.model.JourFerier;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import java.time.LocalDate;

public interface JourFerierRepository extends JpaRepository<JourFerier, Integer> {
    @Query(value = "SELECT COUNT(*) FROM JourFerier WHERE date_ferier = :date", nativeQuery = true)
    Long countByDateFerier(@Param("date") LocalDate dateFerier);

    default boolean existsByDateFerier(LocalDate dateFerier) {
        return countByDateFerier(dateFerier) > 0;
    }
}
LivreRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Livre;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface LivreRepository extends JpaRepository<Livre, Integer> {
    boolean existsByIsbn(String isbn);
}
PenaliteRepository:
package com.example.biblio.repository;

import com.example.biblio.model.Penalite;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;

@Repository
public interface PenaliteRepository extends JpaRepository<Penalite, Integer> {
    boolean existsByAdherantIdAdherantAndDateFinPenaliteAfter(Integer idAdherant, LocalDate date);
    List<Penalite> findByDateFinPenaliteAfter(LocalDate date);
}
PretRepository:

package com.example.biblio.repository;

import com.example.biblio.model.Pret;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface PretRepository extends JpaRepository<Pret, Integer> {
    // Vérifie si l'exemplaire est actuellement emprunté (disponibilité)
    Pret findByExemplaireIdAndDateRetourReelleIsNull(Integer exemplaireId);

    // Vérifie si l'adhérant a des pénalités actives
    @Query("SELECT COUNT(p) > 0 FROM Penalite p WHERE p.adherant.idAdherant = :adherantId AND p.dateFinPenalite >= :currentDate")
    boolean hasActivePenalties(Integer adherantId, java.time.LocalDate currentDate);

    // Vérifie si un prêt existe pour un adhérant et un exemplaire avec date_retour_reelle null
    @Query("SELECT p FROM Pret p WHERE p.adherant.idAdherant = :adherantId AND p.exemplaire.id = :exemplaireId AND p.dateRetourReelle IS NULL")
    Pret findByAdherantIdAndExemplaireIdAndDateRetourReelleIsNull(Integer adherantId, Integer exemplaireId);

    // Récupère tous les prêts en cours (date_retour_reelle IS NULL)
    @Query("SELECT p FROM Pret p WHERE p.dateRetourReelle IS NULL")
    List<Pret> findAllByDateRetourReelleIsNull();
}
ReservationRepository:
package com.example.biblio.repository;

   import com.example.biblio.model.Reservation;
   import org.springframework.data.jpa.repository.JpaRepository;
   import org.springframework.data.jpa.repository.Query;
   import org.springframework.stereotype.Repository;

   @Repository
   public interface ReservationRepository extends JpaRepository<Reservation, Integer> {
       @Query("SELECT COUNT(r) > 0 FROM Reservation r WHERE r.exemplaire.id = :exemplaireId AND r.statut = 'EN_ATTENTE'")
       boolean hasActiveReservation(Integer exemplaireId);
   }
TypeAdherantRepository:
package com.example.biblio.repository;

import com.example.biblio.model.TypeAdherant;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;

@Repository
public interface TypeAdherantRepository extends JpaRepository<TypeAdherant, Integer> {
    boolean existsByNomType(String nomType);
    Optional<TypeAdherant> findByNomType(String nomType);
}
Voici maintenant les service, cest ici qu'on appelle les fonctions des requetes dans repository, les fonctions dans ces services sont ensuite appelé dans controller précédemment cités
AdherantService:
package com.example.biblio.service;

import com.example.biblio.model.Adherant;
import com.example.biblio.model.Abonnement;
import com.example.biblio.model.TypeAdherant;
import com.example.biblio.repository.AdherantRepository;
import com.example.biblio.repository.AbonnementRepository;
import com.example.biblio.repository.TypeAdherantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.Optional;

@Service
public class AdherantService {

    @Autowired
    private AdherantRepository adherantRepository;

    @Autowired
    private TypeAdherantRepository typeAdherantRepository;

    @Autowired
    private AbonnementRepository abonnementRepository;

    public Adherant ajouterAdherant(String nom, String prenom, LocalDate dateNaissance, String email,
                                    String nomTypeAdherant, String motDePasse,
                                    LocalDate dateDebutAbonnement) {
        // Vérification des champs obligatoires
        if (nom == null || nom.isEmpty() || prenom == null || prenom.isEmpty() ||
            dateNaissance == null || motDePasse == null || motDePasse.isEmpty()) {
            throw new IllegalArgumentException("Nom, prénom, date de naissance, et mot de passe sont obligatoires");
        }

        // Vérification de l'unicité de l'email
        if (adherantRepository.existsByEmail(email)) {
            throw new IllegalArgumentException("Email déjà utilisé");
        }

        // Vérification du type d'adhérant
        TypeAdherant typeAdherant = typeAdherantRepository.findByNomType(nomTypeAdherant)
                .orElseThrow(() -> new IllegalArgumentException("Type d'adhérant invalide : " + nomTypeAdherant));

        // Vérification de la date de début d'abonnement
        if (dateDebutAbonnement == null) {
            throw new IllegalArgumentException("La date de début d'abonnement est obligatoire");
        }

        // Calcul de la date de fin d'abonnement (365 jours après la date de début)
        LocalDate dateFinAbonnement = dateDebutAbonnement.plusDays(365);

        // Création de l'adhérant
        Adherant adherant = new Adherant(nom, prenom, dateNaissance, email, typeAdherant, motDePasse);
        adherant.setQuotaRestant(typeAdherant.getQuotaEmprunts()); // Initialisation de quota_restant

        // Sauvegarde de l'adhérant
        adherantRepository.save(adherant);

        // Création de l'abonnement
        Abonnement abonnement = new Abonnement(adherant, dateDebutAbonnement, dateFinAbonnement);
        abonnementRepository.save(abonnement);

        return adherant;
    }

    public void renouvelerAbonnement(Integer idAdherant, LocalDate nouvelleDateDebut) {
        // Vérifier si l'adhérant existe
        Adherant adherant = adherantRepository.findById(idAdherant)
                .orElseThrow(() -> new IllegalArgumentException("Adhérant non trouvé"));

        // Vérifier les pénalités actives
        if (abonnementRepository.hasActivePenalite(idAdherant, LocalDate.now())) {
            throw new IllegalArgumentException("L'adhérant a une pénalité active");
        }

        // Trouver l'abonnement actuel le plus récent
        Optional<Abonnement> currentAbonnementOpt = abonnementRepository.findByAdherantIdAndDateFinAfter(idAdherant, LocalDate.now());
        if (currentAbonnementOpt.isPresent()) {
            LocalDate currentDateFin = currentAbonnementOpt.get().getDateFin();
            // Vérifier que la nouvelle date de début est postérieure à la date de fin actuelle
            if (nouvelleDateDebut.isBefore(currentDateFin) || nouvelleDateDebut.isEqual(currentDateFin)) {
                throw new IllegalArgumentException("La nouvelle date de début doit être postérieure à la date de fin actuelle (" + currentDateFin + ")");
            }
        }

        // Calculer la nouvelle date de fin (365 jours après la nouvelle date de début)
        LocalDate nouvelleDateFin = nouvelleDateDebut.plusDays(365);

        // Créer un nouvel abonnement
        Abonnement nouvelAbonnement = new Abonnement(adherant, nouvelleDateDebut, nouvelleDateFin);
        abonnementRepository.save(nouvelAbonnement);
    }
}
JourFerierService:

package com.example.biblio.service;

import com.example.biblio.model.JourFerier;
import com.example.biblio.repository.JourFerierRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;

@Service
public class JourFerierService {

    @Autowired
    private JourFerierRepository jourFerierRepository;

    @Transactional
    public void ajouterJourFerier(LocalDate dateFerier, String description) {
        // Vérification de la date : non nulle
        if (dateFerier == null) {
            throw new IllegalArgumentException("La date du jour férié est obligatoire");
        }

        // Vérification de l'unicité
        if (jourFerierRepository.existsByDateFerier(dateFerier)) {
            throw new IllegalArgumentException("Cette date est déjà enregistrée comme jour férié");
        }

        // Création et enregistrement du jour férié
        JourFerier jourFerier = new JourFerier();
        jourFerier.setDateFerier(dateFerier);
        jourFerier.setDescription(description != null && !description.isEmpty() ? description : null);
        jourFerierRepository.save(jourFerier);
    }
}
PenaliteService:
package com.example.biblio.service;

import com.example.biblio.model.Penalite;
import com.example.biblio.repository.PenaliteRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;

@Service
public class PenaliteService {

    @Autowired
    private PenaliteRepository penaliteRepository;

    public List<Penalite> getPenalitesEnCours() {
        return penaliteRepository.findByDateFinPenaliteAfter(LocalDate.now());
    }
}
PretService:
package com.example.biblio.service;

import com.example.biblio.model.*;
import com.example.biblio.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

@Service
public class PretService {

    private static final int DUREE_PRET_A_EMPORTER = 14; // Durée en jours pour prêt à emporter

    @Autowired
    private AdherantRepository adherantRepository;

    @Autowired
    private ExemplaireRepository exemplaireRepository;

    @Autowired
    private PretRepository pretRepository;

    @Autowired
    private PenaliteRepository penaliteRepository;

    @Autowired
    private LivreRepository livreRepository;

    public void preterLivre(Integer idAdherant, Integer idLivre, String typePret, LocalDate datePret) {
        // Vérification de l'existence de l'adhérant
        Adherant adherant = adherantRepository.findById(idAdherant)
                .orElseThrow(() -> new IllegalArgumentException("Adhérant non trouvé"));

        // Vérification de l'abonnement actif
        if (!adherant.hasValidAbonnement(datePret)) {
            throw new IllegalStateException("Abonnement non valide");
        }

        // Vérification des pénalités actives
        if (penaliteRepository.existsByAdherantIdAdherantAndDateFinPenaliteAfter(idAdherant, datePret)) {
            throw new IllegalStateException("Adhérant sanctionné");
        }

        // Vérification de l'existence du livre
        Livre livre = livreRepository.findById(idLivre)
                .orElseThrow(() -> new IllegalArgumentException("Livre non trouvé"));

        // Vérification de l'âge minimum
        int ageAdherant = (int) ChronoUnit.YEARS.between(adherant.getDateNaissance(), datePret);
        if (livre.getAgeMinimum() > ageAdherant) {
            throw new IllegalStateException("Livre non adapté à l'âge de l'adhérant");
        }

        // Vérification de la disponibilité d'un exemplaire
        Exemplaire exemplaire = exemplaireRepository.findFirstByLivreIdAndStatutDisponible(idLivre)
                .orElseThrow(() -> new IllegalStateException("Aucun exemplaire disponible pour ce livre"));

        // Vérification du quota pour A_EMPORTER
        Pret.TypePret typePretEnum = Pret.TypePret.valueOf(typePret);
        if (typePretEnum == Pret.TypePret.A_EMPORTER && adherant.getQuotaRestant() <= 0) {
            throw new IllegalStateException("Quota d'emprunts à emporter dépassé");
        }

        // Création du prêt
        Pret pret = new Pret();
        pret.setAdherant(adherant);
        pret.setExemplaire(exemplaire);
        pret.setDatePret(datePret);
        pret.setTypePret(typePretEnum);
        pret.setNombreProlongements(0);

        // Calcul de la date de retour prévue
        if (typePretEnum == Pret.TypePret.LECTURE_SUR_PLACE) {
            pret.setDateRetourPrevue(datePret); // Même jour pour LECTURE_SUR_PLACE
        } else {
            pret.setDateRetourPrevue(datePret.plusDays(DUREE_PRET_A_EMPORTER)); // 14 jours pour A_EMPORTER
        }

        // Mise à jour du quota restant pour A_EMPORTER
        if (typePretEnum == Pret.TypePret.A_EMPORTER) {
            adherant.setQuotaRestant(adherant.getQuotaRestant() - 1);
            adherantRepository.save(adherant);
        }

        // Mise à jour du statut de l'exemplaire
        exemplaire.setStatut(Exemplaire.StatutExemplaire.EMPRUNTE);
        exemplaireRepository.save(exemplaire);

        // Enregistrement du prêt
        pretRepository.save(pret);
    }
}
RendreLivreService:
package com.example.biblio.service;

import com.example.biblio.model.*;
import com.example.biblio.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;

@Service
public class RendreLivreService {

    private static final Logger logger = LoggerFactory.getLogger(RendreLivreService.class);
    private static final int NOMBRE_JOURS_PENALITE = 7; // Pénalité fixée à 7 jours en cas de retard

    @Autowired
    private AdherantRepository adherantRepository;

    @Autowired
    private ExemplaireRepository exemplaireRepository;

    @Autowired
    private PretRepository pretRepository;

    @Autowired
    private PenaliteRepository penaliteRepository;

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private JourFerierRepository jourFerierRepository;

    public LocalDate rendreLivre(Integer idAdherant, Integer idExemplaire, LocalDate dateRetourReelle) {
        logger.info("Début du rendu du livre pour idAdherant={}, idExemplaire={}, dateRetourReelle={}", 
                    idAdherant, idExemplaire, dateRetourReelle);

        // Vérification de l'existence de l'adhérant
        Adherant adherant = adherantRepository.findById(idAdherant)
                .orElseThrow(() -> new IllegalArgumentException("Adhérant non trouvé"));

        // Vérification de l'existence de l'exemplaire
        Exemplaire exemplaire = exemplaireRepository.findById(idExemplaire)
                .orElseThrow(() -> new IllegalArgumentException("Exemplaire non trouvé"));

        // Vérification si l'exemplaire est emprunté par cet adhérant
        Pret pret = pretRepository.findByAdherantIdAndExemplaireIdAndDateRetourReelleIsNull(idAdherant, idExemplaire);
        if (pret == null) {
            throw new IllegalStateException("Exemplaire non emprunté par cet adhérant");
        }

        // Mise à jour de la date de retour réelle
        pret.setDateRetourReelle(dateRetourReelle);
        pretRepository.save(pret);
        logger.info("Date retour réelle mise à jour pour prêt id={}: {}", pret.getId(), dateRetourReelle);

        // Gestion des pénalités si retard
        LocalDate dateFinPenalite = null;
        LocalDate dateLimiteRetour = pret.getDateRetourPrevue();
        boolean isDateRetourPrevueFerier = jourFerierRepository.existsByDateFerier(dateLimiteRetour);
        logger.info("Date retour prévue: {}, isDateRetourPrevueFerier: {}", dateLimiteRetour, isDateRetourPrevueFerier);
        if (isDateRetourPrevueFerier) {
            dateLimiteRetour = dateLimiteRetour.plusDays(1); // Prolonger d'un jour si date_retour_prevue est fériée
            logger.info("Date limite prolongée au lendemain: {}", dateLimiteRetour);
        }
        logger.info("Date retour réelle: {}, Date limite retour: {}", dateRetourReelle, dateLimiteRetour);
        if (dateRetourReelle.isAfter(dateLimiteRetour)) {
            logger.info("Pénalité appliquée: retour en retard");
            Penalite penalite = new Penalite();
            penalite.setAdherant(adherant);
            penalite.setPret(pret);
            penalite.setTypePenalite(Penalite.TypePenalite.RETARD);
            penalite.setDateDebutPenalite(dateRetourReelle);
            penalite.setNombreJours(NOMBRE_JOURS_PENALITE);
            penalite.setDateFinPenalite(dateRetourReelle.plusDays(NOMBRE_JOURS_PENALITE));
            penaliteRepository.save(penalite);
            logger.info("Pénalité enregistrée: id={}, dateFinPenalite={}", penalite.getId(), penalite.getDateFinPenalite());
            dateFinPenalite = penalite.getDateFinPenalite();
        } else {
            logger.info("Aucune pénalité: retour dans les délais");
        }

        // Mise à jour du quota_restant si prêt "à emporter"
        if (pret.getTypePret() == Pret.TypePret.A_EMPORTER) {
            adherant.setQuotaRestant(adherant.getQuotaRestant() + 1);
            adherantRepository.save(adherant);
            logger.info("Quota restant mis à jour pour adhérant id={}: {}", adherant.getIdAdherant(), adherant.getQuotaRestant());
        }

        // Mise à jour du statut de l'exemplaire
        boolean hasReservation = reservationRepository.hasActiveReservation(idExemplaire);
        exemplaire.setStatut(hasReservation ? Exemplaire.StatutExemplaire.RESERVE : Exemplaire.StatutExemplaire.DISPONIBLE);
        exemplaireRepository.save(exemplaire);
        logger.info("Statut exemplaire mis à jour pour id={}: {}", exemplaire.getId(), exemplaire.getStatut());

        return dateFinPenalite; // Retourne la date de fin de pénalité si applicable, sinon null
    }
}
Voici le BiblioApplication.java:
package com.example.biblio;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BiblioApplication {
    public static void main(String[] args) {
        SpringApplication.run(BiblioApplication.class, args);
    }
}
pom.xml:
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>biblio</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>biblio</name>
    <description>Bibliothèque Spring Boot Application</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
        <relativePath/>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
    <groupId>jakarta.servlet.jsp.jstl</groupId>
    <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
    <version>3.0.0</version>
</dependency>
<dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
    <version>3.0.1</version>
</dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
Voici les pages déjà existant, qu'il ne faut pas changer, juste prends exemple pour la fonctionnalité "Reservation":
ajouter-adherant.jsp:

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Ajouter un adhérant" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Ajouter un nouvel adhérant</h2>
        
        <c:if test="${not empty errorMessage}">
            <div class="alert alert-danger">${errorMessage}</div>
        </c:if>
        <c:if test="${not empty successMessage}">
            <div class="alert alert-success">${successMessage}</div>
        </c:if>
        
        <form action="/ajouter" method="post">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="text" name="nom" class="form-control" id="nom" placeholder="Nom" required>
                        <label for="nom">Nom</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="text" name="prenom" class="form-control" id="prenom" placeholder="Prénom" required>
                        <label for="prenom">Prénom</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="date" name="dateNaissance" class="form-control" id="dateNaissance" placeholder="Date de naissance" required>
                        <label for="dateNaissance">Date de naissance</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="email" name="email" class="form-control" id="email" placeholder="Email" required>
                        <label for="email">Email</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="password" name="motDePasse" class="form-control" id="motDePasse" placeholder="Mot de passe" required>
                        <label for="motDePasse">Mot de passe</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <select name="nomTypeAdherant" id="typeAdherant" class="form-select" required>
                            <option value="" disabled selected>Sélectionnez un type</option>
                            <c:forEach var="type" items="${typesAdherant}">
                                <option value="${type.nomType}">${type.nomType}</option>
                            </c:forEach>
                        </select>
                        <label for="typeAdherant">Type d'adhérant</label>
                        <c:if test="${empty typesAdherant}">
                            <div class="text-danger mt-2">Aucun type d'adhérant disponible. Veuillez contacter l'administrateur.</div>
                        </c:if>
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <div class="form-floating">
                    <input type="date" name="dateDebutAbonnement" value="${now}" class="form-control" id="dateDebutAbonnement" placeholder="Date de début d'abonnement" required>
                    <label for="dateDebutAbonnement">Date de début d'abonnement</label>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <button type="submit" class="btn btn-primary w-100">Ajouter</button>
                </div>
                <div class="col-md-6">
                    <button type="reset" class="btn btn-secondary w-100">Réinitialiser</button>
                </div>
            </div>
        </form>
    </div>
</div>
gerer-jours-feries.jsp:

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Gérer les jours fériés" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Gérer les jours fériés</h2>

        <!-- Formulaire d'ajout -->
        <form action="/jours-feries" method="post">
            <div class="mb-3">
                <label for="dateFerier" class="form-label">Date du jour férié</label>
                <input type="date" class="form-control" id="dateFerier" name="dateFerier" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description (facultatif)</label>
                <input type="text" class="form-control" id="description" name="description">
            </div>
            <button type="submit" class="btn btn-primary">Enregistrer</button>
        </form>

        <!-- Messages d'erreur ou de succès -->
        <c:if test="${not empty errorMessage}">
            <div class="alert alert-danger mt-3">${errorMessage}</div>
        </c:if>
        <c:if test="${not empty successMessage}">
            <div class="alert alert-success mt-3">${successMessage}</div>
        </c:if>

        <!-- Liste des jours fériés -->
        <h3 class="card-title mt-4">Liste des jours fériés</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach var="jourFerier" items="${joursFeries}">
                        <tr>
                            <td>${jourFerier.dateFerier}</td>
                            <td>${jourFerier.description != null ? jourFerier.description : 'Aucune description'}</td>
                        </tr>
                    </c:forEach>
                    <c:if test="${empty joursFeries}">
                        <tr>
                            <td colspan="2" class="text-center">Aucun jour férié enregistré.</td>
                        </tr>
                    </c:if>
                </tbody>
            </table>
        </div>
    </div>
</div>
index.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Accueil" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Bienvenue dans le système de gestion de la bibliothèque</h2>
        <p class="card-text">Utilisez le menu à gauche pour gérer les adhérants, les prêts et les retours.</p>
    </div>
</div>
layout.jsp:

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageTitle}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link href="${pageContext.request.contextPath}/css/styles.css" rel="stylesheet">
</head>
<body>
    <header class="header d-flex align-items-center">
        <i class="bi bi-list toggle-sidebar-btn"></i>
        <div class="logo">
            <h1>Bibliothèque</h1>
        </div>
    </header>
    <aside class="sidebar">
        <ul class="sidebar-nav">
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/">
                    <i class="bi bi-house ici"></i>
                    <span>Accueil</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/ajouter">
                    <i class="bi bi-person-plus ici"></i>
                    <span>Ajouter un adhérant</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/adherants">
                    <i class="bi bi-people ici"></i>
                    <span>Liste des adhérants inscrits</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/prets">
                    <i class="bi bi-book ici"></i>
                    <span>Prêter un livre</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/prets/liste">
                    <i class="bi bi-list-check ici"></i>
                    <span>Prêts en cours</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="${pageContext.request.contextPath}/retours">
                    <i class="bi bi-arrow-left-circle ici"></i>
                    <span>Rendre un livre</span>
                </a>
            </li>
             <li class="nav-item">
                <a class="nav-link ${pageContext.request.requestURI.contains('jours-feries') ? 'active' : ''}" href="/jours-feries">
                    <i class="bi bi-calendar-x ici"></i>
                    <span>Gérer les jours fériés</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link ${pageContext.request.requestURI.contains('penalites') ? 'active' : ''}" href="/penalites">
                    <i class="bi bi-exclamation-circle ici"></i>
                    <span>Pénalités en cours</span>
                </a>
            </li>
            <li class="nav-item">
                        <a class="nav-link ${pageContext.request.requestURI.contains('renouveler') ? 'active' : ''}" href="/renouveler">
                            <i class="bi bi-arrow-repeat ici"></i>
                            <span>Renouveler un abonnement</span>
                        </a>
                    </li>
        </ul>
    </aside>
    <main id="main">
        <!-- Le contenu spécifique sera inséré par chaque JSP -->
    </main>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const toggleBtn = document.querySelector('.toggle-sidebar-btn');
            const body = document.body;
            
            toggleBtn.addEventListener('click', function() {
                body.classList.toggle('toggle-sidebar');
                if (body.classList.contains('toggle-sidebar')) {
                    localStorage.setItem('sidebarState', 'collapsed');
                } else {
                    localStorage.setItem('sidebarState', 'expanded');
                }
            });

            if (localStorage.getItem('sidebarState') === 'collapsed') {
                body.classList.add('toggle-sidebar');
            }
        });
    </script>
</body>
</html>
liste-adherants.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<c:set var="pageTitle" value="Liste des adhérants" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Liste des adhérants inscrits</h2>
        
        <c:if test="${not empty errorMessage}">
            <div class="alert alert-danger">${errorMessage}</div>
        </c:if>
        
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Nom de l'adhérant</th>
                        <th>Date de naissance</th>
                        <th>Email</th>
                        <th>Type d'adhérant</th>
                        <th>Quota restant</th>
                        <th>Quota emprunts</th>
                        <th>Quota réservations</th>
                        <th>Quota prolongements</th>
                        <th>Date de début d'abonnement</th>
                        <th>Date de fin d'abonnement</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach var="adherant" items="${adherants}">
                        <c:set var="latestAbonnement" value="${null}"/>
                        <c:forEach var="abonnement" items="${adherant.abonnements}">
                            <c:if test="${empty latestAbonnement or abonnement.dateDebut gt latestAbonnement.dateDebut}">
                                <c:set var="latestAbonnement" value="${abonnement}"/>
                            </c:if>
                        </c:forEach>
                        <tr>
                            <td>${adherant.nom} ${adherant.prenom}</td>
                            <td>${adherant.dateNaissance}</td>
                            <td>${adherant.email}</td>
                            <td>${adherant.typeAdherant.nomType}</td>
                            <td>${adherant.quotaRestant}</td>
                            <td>${adherant.typeAdherant.quotaEmprunts}</td>
                            <td>${adherant.typeAdherant.quotaReservations}</td>
                            <td>${adherant.typeAdherant.quotaProlongements}</td>
                            <td>${latestAbonnement.dateDebut}</td>
                            <td>${latestAbonnement.dateFin}</td>
                        </tr>
                    </c:forEach>
                    <c:if test="${empty adherants}">
                        <tr>
                            <td colspan="10" class="text-center">Aucun adhérant avec abonnement valide trouvé.</td>
                        </tr>
                    </c:if>
                </tbody>
            </table>
        </div>
    </div>
</div>
liste-prets.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<c:set var="pageTitle" value="Prêts en cours" scope="request"/>
<!-- <c:set var="contentPage" value="/WEB-INF/views/liste-prets.jsp" scope="request"/> -->
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Prêts en cours</h2>
        <c:if test="${empty pretsEnCours}">
            <p class="error-message">Aucun prêt en cours</p>
        </c:if>
        <c:if test="${not empty pretsEnCours}">
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>ID du prêt</th>
                            <th>Nom de l'adhérant</th>
                            <th>Prénom de l'adhérant</th>
                            <th>Titre du livre</th>
                            <th>Type de prêt</th>
                            <th>Date du prêt</th>
                            <th>Date de retour prévue</th>
                        </tr>
                    </thead>
                    <tbody>
                        <c:forEach var="pret" items="${pretsEnCours}">
                            <tr>
                                <td>${pret.id}</td>
                                <td>${pret.adherant.nom}</td>
                                <td>${pret.adherant.prenom}</td>
                                <td>${pret.exemplaire.livre.titre}</td>
                                <td>${pret.typePret}</td>
                                <td>${pret.datePret}</td>
                                <td>${pret.dateRetourPrevue}</td>
                            </tr>
                        </c:forEach>
                    </tbody>
                </table>
            </div>
        </c:if>
    </div>
</div>
penalitesEnCours.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Pénalités en cours" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Pénalités en cours</h2>

        <!-- Liste des pénalités en cours -->
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Nom de l'adhérant</th>
                        <th>Type de pénalité</th>
                        <th>Date de retour prévue</th>
                        <th>Date de retour réelle</th>
                        <th>Nombre de jours</th>
                        <th>Date de fin de pénalité</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach var="penalite" items="${penalites}">
                        <tr>
                            <td>${penalite.adherant.nom} ${penalite.adherant.prenom}</td>
                            <td>${penalite.typePenalite}</td>
                            <td>${penalite.pret.dateRetourPrevue}</td>
                            <td>${penalite.pret.dateRetourReelle}</td>
                            <td>${penalite.nombreJours}</td>
                            <td>${penalite.dateFinPenalite}</td>
                        </tr>
                    </c:forEach>
                    <c:if test="${empty penalites}">
                        <tr>
                            <td colspan="6" class="text-center">Aucune pénalité en cours.</td>
                        </tr>
                    </c:if>
                </tbody>
            </table>
        </div>
    </div>
</div>
preterLivre.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<c:set var="pageTitle" value="Prêter un livre" scope="request"/>
<!-- <c:set var="contentPage" value="/WEB-INF/views/preterLivre.jsp" scope="request"/> -->
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Prêter un livre</h2>

        <c:if test="${not empty errorMessage}">
            <p class="error-message">${errorMessage}</p>
        </c:if>
        <c:if test="${not empty successMessage}">
            <p class="success-message">${successMessage}</p>
        </c:if>
        <c:if test="${not empty sessionScope.penaltyMessage}">
            <p class="penalty-message">${sessionScope.penaltyMessage}</p>
            <c:remove var="penaltyMessage" scope="session"/>
        </c:if>

        <form action="/prets" method="post">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="number" id="idAdherant" name="idAdherant" class="form-control" placeholder="Référence de l'adhérant" required>
                        <label for="idAdherant">Référence de l'adhérant</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <select id="idLivre" name="idLivre" class="form-select" required>
                            <option value="">-- Sélectionner un livre --</option>
                            <c:forEach var="livre" items="${livres}">
                                <option value="${livre.id}">${livre.titre}</option>
                            </c:forEach>
                        </select>
                        <label for="idLivre">Livre</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <select id="typePret" name="typePret" class="form-select" required>
                            <option value="LECTURE_SUR_PLACE">Lecture sur place</option>
                            <option value="A_EMPORTER">À emporter</option>
                        </select>
                        <label for="typePret">Type de prêt</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="date" id="datePret" name="datePret" class="form-control" placeholder="Date du prêt" required>
                        <label for="datePret">Date du prêt</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <button type="submit" class="btn btn-primary w-100">Prêter</button>
                </div>
                <div class="col-md-6">
                    <button type="reset" class="btn btn-secondary w-100">Réinitialiser</button>
                </div>
            </div>
        </form>
    </div>
</div>
rendreLivre.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<c:set var="pageTitle" value="Rendre un livre" scope="request"/>
<!-- <c:set var="contentPage" value="/WEB-INF/views/rendreLivre.jsp" scope="request"/> -->
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Rendre un livre</h2>

        <c:if test="${not empty errorMessage}">
            <div class="error-message">${errorMessage}</div>
        </c:if>
        <c:if test="${not empty penaltyMessage}">
            <c:choose>
                <c:when test="${penaltyMessage.contains('pénalisé')}">
                    <div class="penalty-message">${penaltyMessage}</div>
                </c:when>
                <c:otherwise>
                    <div class="success-message">${penaltyMessage}</div>
                </c:otherwise>
            </c:choose>
        </c:if>
        <c:if test="${param.success == 'true'}">
            <div class="success-message">Livre rendu avec succès !</div>
        </c:if>

        <form action="/retours" method="post">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="text" id="idAdherant" name="idAdherant" class="form-control" placeholder="ID de l'adhérant" required>
                        <label for="idAdherant">ID de l'adhérant</label>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-floating">
                        <input type="text" id="idExemplaire" name="idExemplaire" class="form-control" placeholder="ID de l'exemplaire" required>
                        <label for="idExemplaire">ID de l'exemplaire</label>
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <div class="form-floating">
                    <input type="date" id="dateRetourReelle" name="dateRetourReelle" class="form-control" placeholder="Date de retour réelle" required>
                    <label for="dateRetourReelle">Date de retour réelle</label>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <button type="submit" class="btn btn-primary w-100">Rendre</button>
                </div>
                <div class="col-md-6">
                    <button type="reset" class="btn btn-secondary w-100">Réinitialiser</button>
                </div>
            </div>
        </form>
    </div>
</div>
renouveler-abonnement.jsp:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="pageTitle" value="Renouveler un abonnement" scope="request"/>
<jsp:include page="/WEB-INF/views/layout.jsp"/>
<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Renouveler un abonnement</h2>
            
            <c:if test="${not empty errorMessage}">
                <div class="alert alert-danger">${errorMessage}</div>
            </c:if>
            <c:if test="${not empty successMessage}">
                <div class="alert alert-success">${successMessage}</div>
            </c:if>

            <form action="/renouveler" method="post">
                <div class="mb-3">
                    <label for="idAdherant" class="form-label">ID de l'adhérant</label>
                    <input type="number" class="form-control" id="idAdherant" name="idAdherant" required>
                </div>
                <div class="mb-3">
                    <label for="dateDebutAbonnement" class="form-label">Nouvelle date de début d'abonnement</label>
                    <input type="date" class="form-control" id="dateDebutAbonnement" name="dateDebutAbonnement" required>
                </div>
                <button type="submit" class="btn btn-primary">Renouveler</button>
                <a href="/adherants" class="btn btn-secondary">Annuler</a>
            </form>
        </div>
    </div>
</div>
Je rappelle que le but est de créer une page de login pour un admin (super utilisateur bibliothecaire), un seul admin avec un login fixe inséré directement depuis la base une seule fois (pas d'inscription juste un login de connexion)
à verifier que le login entré par l'admin correspondant à celui de la base et tout...
Ce site et ces fonctionnalités marchent déjà très bien, sans erreur avec toutes les scénario possibles, donc ne change rien inutilement qui puisse cesser le bon fonctionnement du site
Ne fais pas ce que je n'ai pas demandé et fais tout ça simplement sans compliqué les choses et étape par étape en français stp
NE COMPLIQUE RIEN, suis bien les instructions et le même structure de code




